{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useState, useEffect } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DEFAULT_CONFIGURATION from \"./internal/defaultConfiguration\";\nimport NativeInterface from \"./internal/nativeInterface\";\nimport State from \"./internal/state\";\nimport * as Types from \"./internal/types\";\nvar _configuration = DEFAULT_CONFIGURATION;\nvar _state = null;\n\nvar createState = function createState() {\n  return new State(_configuration);\n};\n\nexport function configure(configuration) {\n  _configuration = _objectSpread(_objectSpread({}, DEFAULT_CONFIGURATION), configuration);\n\n  if (_state) {\n    _state.tearDown();\n\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\nexport function fetch(requestedInterface) {\n  if (!_state) {\n    _state = createState();\n  }\n\n  return _state.latest(requestedInterface);\n}\nexport function addEventListener(listener) {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n\n  return function () {\n    _state && _state.remove(listener);\n  };\n}\nexport function useNetInfo(configuration) {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  var _useState = useState({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      netInfo = _useState2[0],\n      setNetInfo = _useState2[1];\n\n  useEffect(function () {\n    return addEventListener(setNetInfo);\n  }, []);\n  return netInfo;\n}\nexport * from \"./internal/types\";\nexport default {\n  configure: configure,\n  fetch: fetch,\n  addEventListener: addEventListener,\n  useNetInfo: useNetInfo\n};","map":{"version":3,"mappings":";;;;;;;AASA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,OAAOC,qBAAP;AACA,OAAOC,eAAP;AACA,OAAOC,KAAP;AACA,OAAO,KAAKC,KAAZ;AAGA,IAAIC,cAAc,GAAGJ,qBAArB;AAGA,IAAIK,MAAoB,GAAG,IAA3B;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAa;EAC/B,OAAO,IAAIJ,KAAJ,CAAUE,cAAV,CAAP;AADF;;AAWA,OAAO,SAASG,SAAT,CACLC,aADK,EAEC;EACNJ,cAAc,mCACTJ,qBADS,GAETQ,aAFS,CAAdJ;;EAKA,IAAIC,MAAJ,EAAY;IACVA,MAAM,CAACI,QAAPJ;;IACAA,MAAM,GAAGC,WAAW,EAApBD;EACD;;EAED,IAAIK,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;IACzBT,eAAe,CAACM,SAAhBN,CAA0BO,aAA1BP;EACD;AACF;AASD,OAAO,SAASW,KAAT,CACLC,kBADK,EAEwB;EAC7B,IAAI,CAACR,MAAL,EAAa;IACXA,MAAM,GAAGC,WAAW,EAApBD;EACD;;EACD,OAAOA,MAAM,CAACS,MAAPT,CAAcQ,kBAAdR,CAAP;AACD;AAaD,OAAO,SAASU,gBAAT,CACLC,QADK,EAEsB;EAC3B,IAAI,CAACX,MAAL,EAAa;IACXA,MAAM,GAAGC,WAAW,EAApBD;EACD;;EAEDA,MAAM,CAACY,GAAPZ,CAAWW,QAAXX;;EACA,OAAO,YAAY;IACjBA,MAAM,IAAIA,MAAM,CAACa,MAAPb,CAAcW,QAAdX,CAAVA;EADF;AAGD;AAOD,OAAO,SAASc,UAAT,CACLX,aADK,EAEe;EACpB,IAAIA,aAAJ,EAAmB;IACjBD,SAAS,CAACC,aAAD,CAATD;EACD;;EAED,gBAA8BT,QAAQ,CAAqB;IACzDsB,IAAI,EAAEjB,KAAK,CAACkB,gBAANlB,CAAuBmB,OAD4B;IAEzDC,WAAW,EAAE,IAF4C;IAGzDC,mBAAmB,EAAE,IAHoC;IAIzDC,OAAO,EAAE;EAJgD,CAArB,CAAtC;EAAA;EAAA,IAAOC,OAAP;EAAA,IAAgBC,UAAhB;;EAOA5B,SAAS,CAAC,YAAoB;IAC5B,OAAOgB,gBAAgB,CAACY,UAAD,CAAvB;EADO,GAEN,EAFM,CAAT5B;EAIA,OAAO2B,OAAP;AACD;AAED;AAEA,eAAe;EACbnB,SADa,EACbA,SADa;EAEbK,KAFa,EAEbA,KAFa;EAGbG,gBAHa,EAGbA,gBAHa;EAIbI;AAJa,CAAf","names":["useState","useEffect","DEFAULT_CONFIGURATION","NativeInterface","State","Types","_configuration","_state","createState","configure","configuration","tearDown","Platform","OS","fetch","requestedInterface","latest","addEventListener","listener","add","remove","useNetInfo","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","netInfo","setNetInfo"],"sources":["index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Subscribe to connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook which updates when the connection state changes.\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  addEventListener,\n  useNetInfo,\n};\n"]},"metadata":{},"sourceType":"module"}